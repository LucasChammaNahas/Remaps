[
  {
    "comment": "Move Cursor a Big Block Up",
    "key": "ctrl+shift+i",
    "command": "vim.remap",
    "when": "editorFocus",
    "args": {
      "after": [
        "2",
        "0",
        "i"
      ]
    }
  },
  {
    "comment": "Move Cursor a Big Block Down",
    "key": "ctrl+shift+k",
    "command": "vim.remap",
    "when": "editorFocus",
    "args": {
      "after": [
        "2",
        "0",
        "k"
      ]
    }
  },
  {
    "comment": "Move Cursor a Big Block Down",
    "key": "ctrl+shift+k",
    "command": "-editor.action.deleteLines",
    "when": "editorFocus"
  },
  {
    "comment": "Move Cursor Strong Up",
    "key": "up",
    "command": "vim.remap",
    "when": "editorTextFocus && vim.mode != 'Insert'",
    "args": {
      "after": [
        "2",
        "i"
      ]
    }
  },
  {
    "comment": "Move Cursor Strong Down",
    "key": "down",
    "command": "vim.remap",
    "when": "editorTextFocus && vim.mode != 'Insert'",
    "args": {
      "after": [
        "2",
        "k"
      ]
    }
  },
  {
    "comment": "Move Cursor Strong Left",
    "key": "left",
    "command": "vim.remap",
    "when": "editorTextFocus && vim.mode != 'Insert'",
    "args": {
      "after": [
        "2",
        "j"
      ]
    }
  },
  {
    "comment": "Move Cursor Strong Right",
    "key": "right",
    "command": "vim.remap",
    "when": "editorTextFocus && vim.mode != 'Insert'",
    "args": {
      "after": [
        "2",
        "l"
      ]
    }
  },
  {
    "comment": "Scroll Page Up",
    "key": "ctrl+shift+u",
    "command": "vim.remap",
    "when": "editorFocus",
    "args": {
      "after": [
        "<C-y>"
      ]
    }
  },
  {
    "comment": "Scroll Page Up",
    "key": "ctrl+shift+u",
    "command": "-workbench.action.output.toggleOutput"
  },
  {
    "comment": "Scroll Page Down",
    "key": "ctrl+shift+j",
    "command": "vim.remap",
    "when": "editorFocus",
    "args": {
      "after": [
        "<C-e>"
      ]
    }
  },
  {
    "comment": "Insert Line Above and Enter Insert Mode",
    "key": "shift+enter",
    "command": "vim.remap",
    "when": "editorTextFocus && vim.mode == 'Normal'",
    "args": {
      "after": [
        "g",
        "z",
        "a"
      ]
    }
  },
  {
    "comment": "Delete Left. (Required to Delete While in Normal Mode)",
    "key": "backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  {
    "comment": "Delete Right. (Required to Delete While in Normal Mode)",
    "key": "delete",
    "command": "deleteRight",
    "when": "textInputFocus"
  },
  {
    "comment": "Trigger Suggestions (Mac Doesn't Work With ctrl+space)",
    "key": "ctrl+g",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "comment": "Trigger Suggestions (Mac Doesn't Work With ctrl+space)",
    "key": "ctrl+g",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "comment": "Trigger Copilot",
    "key": "ctrl+alt+space",
    "command": "github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "comment": "Disable Copilot When Pressing ctrl+enter",
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "comment": "Prevents From Going into Normal Mode When Closing Suggest Box (!inDebugRepl is Required for Some Reason)",
    "key": "escape",
    "command": "extension.vim_escape",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetVisible"
  },
  {
    "comment": "Prevents From Going into Normal Mode When Closing Suggest Box (!inDebugRepl is Required for Some Reason)",
    "key": "escape",
    "command": "-extension.vim_escape",
    "when": "editorTextFocus && !inDebugRepl && vim.active"
  },
  {
    "comment": "Toggle Peek Call Hierarchy Direction",
    "key": "ctrl+j",
    "command": "editor.showOutgoingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
  },
  {
    "comment": "Toggle Peek Call Hierarchy Direction",
    "key": "ctrl+j",
    "command": "editor.showIncomingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
  },
  {
    "comment": "Save",
    "key": "ctrl+e space",
    "command": "workbench.action.files.save",
    "when": "editorFocus && !editorReadonly"
  },
  {
    "comment": "Save All",
    "key": "ctrl+shift+s",
    "command": "saveAll"
  },
  {
    "comment": "Open Replace",
    "key": "ctrl+d",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "comment": "Open Replace",
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "comment": "Conflict With Symbols",
    "key": "alt+h",
    "command": "-git.viewFileHistory"
  },
  {
    "comment": "Quit All Instances",
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "comment": "Open View List",
    "key": "ctrl+q",
    "command": "-workbench.action.quickOpenView"
  },
  {
    "comment": "Trigger Suggest",
    "key": "ctrl+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "comment": "Toggle Tab Focus Mode",
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "comment": "Up",
    "key": "i",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Down",
    "key": "k",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Collapse Current Item",
    "key": "j",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Collapse All",
    "key": "t y",
    "command": "workbench.files.action.collapseExplorerFolders",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Expand Current Item",
    "key": "l",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Navigate to Top",
    "key": "g i",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Navigate to Bottom",
    "key": "g k",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Go Back to Editor",
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorTextFocus && !treeFindOpen && !renameInputVisible && !callHierarchyVisible"
  },
  {
    "comment": "Focus Sidebar",
    "key": "b b",
    "command": "workbench.action.focusSideBar",
    "when": "!inputFocus"
  },
  {
    "comment": "Toggle Sidebar",
    "key": "b m",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "!inputFocus"
  },
  {
    "comment": "Next Sidebar",
    "key": "b k",
    "command": "workbench.action.nextSideBarView",
    "when": "!inputFocus"
  },
  {
    "comment": "Previous Sidebar",
    "key": "b i",
    "command": "workbench.action.previousSideBarView",
    "when": "!inputFocus"
  },
  {
    "comment": "Open Tree View",
    "key": "b n",
    "command": "workbench.view.explorer",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Go to File ",
    "key": "Enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Create New File",
    "key": "n",
    "command": "explorer.newFile",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "New Folder",
    "key": "m",
    "command": "explorer.newFolder",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Collapse Tree",
    "key": "q",
    "command": "workbench.files.action.collapseExplorerFolders",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Cut File",
    "key": "a",
    "command": "filesExplorer.cut",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Delete File",
    "key": "s",
    "command": "deleteFile",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Copy File",
    "key": "d",
    "command": "filesExplorer.copy",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Paste File",
    "key": "f",
    "command": "filesExplorer.paste",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Rename File",
    "key": "r",
    "command": "renameFile",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Find in Tree",
    "key": "p",
    "command": "list.find",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open Open Editors View",
    "key": "b o",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Close Current Editor",
    "key": "q",
    "command": "workbench.action.closeActiveEditor",
    "when": "focusedView == 'workbench.explorer.openEditorsView'"
  },
  {
    "comment": "New Untitled File",
    "key": "n",
    "command": "workbench.action.files.newUntitledFile",
    "when": "focusedView == 'workbench.explorer.openEditorsView'"
  },
  {
    "comment": "Reopen Closed Editor",
    "key": "g q",
    "command": "workbench.action.reopenClosedEditor",
    "when": "focusedView == 'workbench.explorer.openEditorsView'"
  },
  {
    "comment": "Move Editor Up",
    "key": "ctrl+i",
    "command": "workbench.action.moveEditorLeftInGroup",
    "when": "focusedView == 'workbench.explorer.openEditorsView'"
  },
  {
    "comment": "Move Editor Down",
    "key": "ctrl+k",
    "command": "workbench.action.moveEditorRightInGroup",
    "when": "focusedView == 'workbench.explorer.openEditorsView'"
  },
  {
    "comment": "Open Outline View",
    "key": "b l",
    "command": "outline.focus",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open Search Panel View",
    "key": "b p",
    "command": "workbench.action.findInFiles",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open Replace Panel View",
    "key": "b h",
    "command": "workbench.action.replaceInFiles",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Focus Search Input",
    "key": "ctrl+f",
    "command": "workbench.action.findInFiles",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Focus Replace Input",
    "key": "ctrl+d",
    "command": "workbench.action.replaceInFiles",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Collapse Search Results",
    "key": "t y",
    "command": "search.action.collapseSearchResults",
    "when": "focusedView == 'workbench.view.search' && !inputFocus"
  },
  {
    "comment": "Expand Search Results",
    "key": "t t",
    "command": "search.action.expandSearchResults",
    "when": "focusedView == 'workbench.view.search' && !inputFocus"
  },
  {
    "comment": "Replace the Current Focused Item",
    "key": "Enter",
    "command": "search.action.replace",
    "when": "focusedView == 'workbench.view.search' && !inputFocus && replaceActive"
  },
  {
    "comment": "Replace All",
    "key": "ctrl+shift+enter",
    "command": "search.action.replaceAll",
    "when": "focusedView == 'workbench.view.search' && replaceActive"
  },
  {
    "comment": "Toggle Match Case",
    "key": "ctrl+u",
    "command": "toggleSearchCaseSensitive",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Toggle Match Whole Word",
    "key": "ctrl+o",
    "command": "toggleSearchWholeWord",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Toggle Preserve Case",
    "key": "ctrl+j",
    "command": "toggleSearchPreserveCase",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Focus Next Input Box",
    "key": "ctrl+k",
    "command": "search.focus.nextInputBox",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Focus Previous Input Box",
    "key": "ctrl+i",
    "command": "search.focus.previousInputBox",
    "when": "focusedView == 'workbench.view.search'"
  },
  {
    "comment": "Go to Next Match",
    "key": "ctrl+k",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Go to Previous Match",
    "key": "ctrl+i",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Replace One",
    "key": "enter",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocused"
  },
  {
    "comment": "Replace All",
    "key": "ctrl+shift+enter",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Toggle Match Case",
    "key": "ctrl+u",
    "command": "toggleFindCaseSensitive",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Toggle Match Whole Word",
    "key": "ctrl+o",
    "command": "toggleFindWholeWord",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Toggle Preserve Case",
    "key": "ctrl+j",
    "command": "togglePreserveCase",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Toggle Find in Selection",
    "key": "ctrl+l",
    "command": "toggleFindInSelection",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "comment": "Close Find Widget",
    "key": "escape",
    "command": "closeFindWidget",
    "when": "editorTextFocus && findWidgetVisible && vim.mode == 'Normal'"
  },
  {
    "comment": "Toggle Panel",
    "key": "b t",
    "command": "workbench.action.togglePanel",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Toggle Terminal",
    "key": "ctrl+t",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    "comment": "Toggle Terminal",
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "comment": "Toggle Terminal",
    "key": "b j",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open New Terminal",
    "key": "b space j",
    "command": "workbench.action.terminal.new",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open New Terminal",
    "key": "ctrl+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocusInAny || terminalTabsFocus"
  },
  {
    "comment": "Up in Terminal List",
    "key": "i",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalTabsFocus"
  },
  {
    "comment": "Up in Terminal List",
    "key": "ctrl+i",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocusInAny || terminalTabsFocus"
  },
  {
    "comment": "Down in Terminal List",
    "key": "k",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalTabsFocus"
  },
  {
    "comment": "Down in Terminal List",
    "key": "ctrl+k",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocusInAny || terminalTabsFocus"
  },
  {
    "comment": "Kill Terminal",
    "key": "ctrl+q",
    "command": "workbench.action.terminal.killActiveTab",
    "when": "terminalFocusInAny || terminalTabsFocus"
  },
  {
    "comment": "Kill Terminal",
    "key": "q",
    "command": "workbench.action.terminal.killActiveTab",
    "when": "terminalTabsFocus"
  },
  {
    "comment": "Rename Terminal",
    "key": "r",
    "command": "workbench.action.terminal.renameActiveTab",
    "when": "terminalTabsFocus"
  },
  {
    "comment": "Toggle Terminal Max Height",
    "key": "m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalTabsFocus"
  },
  {
    "comment": "Toggle Terminal Max Height",
    "key": "ctrl+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "panelFocus"
  },
  {
    "comment": "Go to Terminal Side List",
    "key": "ctrl+l",
    "command": "workbench.action.terminal.focusTabs",
    "when": "terminalFocusInAny || terminalTabsFocus"
  },
  {
    "comment": "Clear Terminal Current Command",
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "comment": "Clear Terminal Current Command",
    "key": "escape",
    "command": "-workbench.action.terminal.clearSelection",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "comment": "Open Source Control View",
    "key": "b g",
    "command": "workbench.view.scm",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Open Commits View",
    "key": "b space g",
    "command": "gitlens.views.commits.focus",
    "when": "listFocus && !inputFocus"
  },
  {
    "comment": "Reveal File on Explorer",
    "key": "o",
    "command": "git.revealInExplorer",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Discard Changes",
    "key": "q",
    "command": "git.clean",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Discard All Changes",
    "key": "shift+q",
    "command": "git.cleanAll",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Stage the Current File",
    "key": "a",
    "command": "git.stage",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Stage All Files",
    "key": "shift+a",
    "command": "git.stageAll",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Unstage the Current File",
    "key": "u",
    "command": "git.unstage",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Unstage All Files",
    "key": "shift+u",
    "command": "git.unstageAll",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Commit Changes",
    "key": "c",
    "command": "git.commitStaged",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Push Changes",
    "key": "shift+p",
    "command": "git.push",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Pull Changes",
    "key": "p",
    "command": "git.pull",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Fetch Changes",
    "key": "f",
    "command": "git.fetch",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Merge Changes",
    "key": "m",
    "command": "git.merge",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Checkout Branch (Open Dialog)",
    "key": "z",
    "command": "git.checkout",
    "when": "activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "comment": "Move Line Up",
    "key": "ctrl+i",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Move Line Down",
    "key": "ctrl+k",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Copy Line Up",
    "key": "ctrl+u",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Copy Line Down",
    "key": "ctrl+j",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Duplicate Cursor Up",
    "key": "ctrl+o",
    "command": "cursorColumnSelectUp",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Duplicate Cursor Down",
    "key": "ctrl+l",
    "command": "cursorColumnSelectDown",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "comment": "Focus Left Editor",
    "key": "ctrl+e left",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "comment": "Focus Right Editor",
    "key": "ctrl+e right",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "comment": "Focus First Editor in Group",
    "key": "ctrl+e home",
    "command": "workbench.action.firstEditorInGroup"
  },
  {
    "comment": "Focus Last Editor in Group",
    "key": "ctrl+e end",
    "command": "workbench.action.lastEditorInGroup"
  }
]